using ANARIS.BLL;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.DataVisualization.Charting;

namespace ANARIS
{
    public partial class ValuePieChart : Form, ANS_View
    {
        ANS_Controller _controller;
        DataBaseCategories dbCategories;
        Dictionary<string, double> ItemsSplitByCategory = new Dictionary<string, double>();


        public ValuePieChart(DataBaseCategories cats)
        {
            InitializeComponent();
            dbCategories = cats;
            LaoadSplitByCategories();      
        }

        public void setController(ANS_Controller cont)
        {
            _controller = cont;
        }

        private void LaoadSplitByCategories()
        {
            cmb_SplitBy.Items.Add("Grupa podstawowa");
            foreach (Category cat in dbCategories.List)
            {
                cmb_SplitBy.Items.Add(cat.text);
            }
        }

        private void btnLoad_Click(object sender, EventArgs e)
        {
            try
            {
                if (cmb_SplitBy.SelectedIndex != -1)
                {
                    DrawPieChart(cmb_SplitBy.SelectedIndex, false);
                }

            }
            catch (Exception exc)
            {
                //zaloguj
                MessageBox.Show("Ups coś poszło nie tak. Błąd" + Environment.NewLine + exc.ToString());
            }


        }

        private void btnCopyImage_Click(object sender, EventArgs e)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                chr_PieChart.SaveImage(ms, ChartImageFormat.Bmp);
                Bitmap bm = new Bitmap(ms);
                Clipboard.SetImage(bm);
            }
        }

        private void ValuePieChart_Resize(object sender, EventArgs e)
        {
            chr_PieChart.Size = new Size(this.Width - gb_Settings.Width - 5, chr_PieChart.Height);
        }

        private void DrawPieChart(int option, bool autoGenerated)
        {
            if (option == 0)
            {
                ItemsSplitByCategory = PieChartHelper.LoadDataByNameValue(_controller.DB, _controller.dbValues.valueList);
            }
            if (option > 0)
            {               
                ItemsSplitByCategory = PieChartHelper.LoadDataByCategoryValue(_controller.DB, _controller.dbCategories, dbCategories.List[option-1].name, _controller.dbValues.valueList);
            }

            if (autoGenerated)
            {
                chr_PieChart.Series[0].IsVisibleInLegend = false;
                chr_PieChart.Series[0].Font = new Font( FontFamily.GenericSansSerif, 12.5f ,FontStyle.Regular);
            }
            else
            {
                chr_PieChart.Series[0].IsVisibleInLegend = true;
                chr_PieChart.Series[0].IsVisibleInLegend = false;
                chr_PieChart.Series[0].Font = new Font(FontFamily.GenericSansSerif, 12.5f, FontStyle.Regular);
            }

            chr_PieChart.Margin = new Padding() { All = 0 };
            chr_PieChart.Titles[0].Text = "Diagram kołowy wartości - " + cmb_SplitBy.Items[option];
            chr_PieChart.Series["PieChartSerie"].Points.Clear();
            //chr_PieChart.Series["PieChartSerie"]
            chr_PieChart.ChartAreas[0].Area3DStyle.Enable3D = true;

            //List<Color> custom = new List<Color>();
            //for (int i =0; i<10; i++)
            //{
            //    int r = i * 24;
            //    int g = 240 - i;
            //    int b = (int)(240 * Math.Sin(Math.PI/10*i));
            //    Color tmc = Color.FromArgb(r, g, b);
            //    custom.Add(tmc);
            //}

            //chr_PieChart.Palette = ChartColorPalette.None;
            //chr_PieChart.PaletteCustomColors = custom.ToArray();

            chr_PieChart.ChartAreas[0].Area3DStyle.Inclination = 0;

            foreach (KeyValuePair<string, double> pair in ItemsSplitByCategory)
            {
                //    chr_PieChart.Series["PieChartSerie"]["PieLabelStyle"] = "Outside";
                //    chr_PieChart.Series["PieChartSerie"]["PieLineColor"] = "Black";

                double value = Math.Round(pair.Value / _controller.DB.collectionTotalValue * 100, 1);
                chr_PieChart.Series["PieChartSerie"].Points.AddXY(pair.Key + ": " + value.ToString() + "%", pair.Value );
            }

        }

        public Bitmap GenerateImageAsBitmap(int option)
        {
            Bitmap bm;            
            DrawPieChart(option, true);

            using (MemoryStream ms = new MemoryStream())
            {
                //chr_PieChart.SaveImage(@"C:\Users\Primus\Desktop\images" + option.ToString() + ".png", ChartImageFormat.Png);
                chr_PieChart.SaveImage(ms, ChartImageFormat.Bmp);
                bm = new Bitmap(ms);                
            }

            return bm;
        }

        public byte[] GenerateImageAsByteArray(int option)
        {
            DrawPieChart(option, true);

            using (MemoryStream ms = new MemoryStream())
            {                
                chr_PieChart.SaveImage(ms, ChartImageFormat.Bmp);
                return ms.ToArray();
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            _controller.ShowHideValuePieChart();
        }

        public void ReloadCategories(DataBaseCategories cats)
        {            
            dbCategories = cats;
            cmb_SplitBy.Items.Clear();
            LaoadSplitByCategories();
        }
    }
}
