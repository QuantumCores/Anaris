<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AnarisEvo.Styles"
                    xmlns:sw="clr-namespace:AnarisEvo.StyleableWindow"
                    >

    <SolidColorBrush x:Key="WindowColor" Color="LightGray"/>
    <SolidColorBrush x:Key="WindowBackColor" Color="#a4e2c9"/>
    <SolidColorBrush x:Key="WindowForeColor" Color="White"/>
    <SolidColorBrush x:Key="WindowForeHighlightColor" Color="WhiteSmoke"/>
    <SolidColorBrush x:Key="WindowButtonColor" Color="#a4e2c9"/>
    <SolidColorBrush x:Key="WindowButtonOverColor" Color="Gray"/>
    <SolidColorBrush x:Key="WindowButtonPressedColor" Color="Gray"/>

    <sw:WindowHideCommand x:Key="HideCommand"></sw:WindowHideCommand>

    <Style TargetType="{x:Type Button}" x:Key="WindowButton">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
        <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
        <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
        <Setter Property="Height" Value="25"/>
        <Setter Property="Width" Value="25"/>
    </Style>

    <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
        <Grid Background="{StaticResource WindowBackColor}">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="30"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" Margin="5,0,5,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="30"/>
                    </Grid.ColumnDefinitions>
                    <Label Grid.Column="0"                                           
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource HideCommand}"                                               
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                        <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                         
                                    Width="16"                                           
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                           
                                    sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                    </Label>
                    <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                  
                                    HorizontalContentAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Foreground="{StaticResource WindowForeColor}"                                           
                                    FontSize="16"
                                    sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.RightButtonShow="true">
                    </Label>
                    <StackPanel Grid.Column="2" Orientation="Horizontal">                        
                        <Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}" Command="{StaticResource HideCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                            <Grid>
                                <!--<Path x:Name="PathClose1" Width="16" Height="16" StrokeThickness="3" Stroke="White"  HorizontalAlignment="Left" Margin="4,0,0,0" Data="M 3,3 L 13,13 Z"/>-->
                                <Path x:Name="PathClose2" Width="16" Height="16" StrokeThickness="3" Stroke="White"  HorizontalAlignment="Left" Margin="4,0,0,0" Data="M 3,13 L 13,3 Z"/>
                                <Ellipse  Height="12" Width="18" StrokeThickness="2" Stroke="White" HorizontalAlignment="Left" Margin="3,0,0,0"/>
                                <ContentPresenter x:Name="MyContentPresenter3" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            </Grid>
                        </Button>
                    </StackPanel>
                </Grid>
                <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                    <Grid>
                        <AdornerDecorator>
                            <ContentPresenter x:Name="WindowContent"/>
                        </AdornerDecorator>
                        <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>                        
                    </Grid>
                </Border>
            </Grid>
            <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- the custom window style and the window template 
        Here you can customize the look of the window without having to touch the control template 
        or comment out the brushes and create a new style (see the red style below)-->


    <!--SETTINGS-->
    <Style x:Key="SettingsManager" TargetType="{x:Type Window}">
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="MinWidth" Value="100"/>
        <Setter Property="MinHeight" Value="46"/>
        <Setter Property="Background" Value="white"/>
        <Setter Property="BorderBrush" Value="#a4e2c9"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Foreground" Value="DarkGray"/>
        <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
    </Style>


</ResourceDictionary>